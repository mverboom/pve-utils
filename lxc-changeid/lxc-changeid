#!/bin/bash
#
# lxc-changeid: change id for a given LXC container

usage() {
   echo "Usage: lxc-changeid <options> [current] [new]"
   echo "changes the CTID of a LXC container with storage based on a ZFS subvol"
   echo
   echo "This script will only update the rootfs for the container."
   echo "Any extra/custom mounts have to be updated manually!"
   echo
   echo "The container will be started if it's possible, use -s and -n"
   echo "to override this behaviour."
   echo
   echo "   -f       Force, do not ask for confirmation"
   echo "   -n       Do not start the container"
   echo "   -s       Start the container"
   echo "   -v       Be more verbose."
   exit 1
}

parse_options() {
   while getopts :fnsv opt
   do
      case $opt in
         f) force=1
            RESPONSE=Y
         ;;
         n) wantrun=0
         ;;
         s) wantrun=1
         ;;
         v) verbose=1
         ;;
         \?) echo "Unknowing options: -$OPTARG"
             usage
         ;;
      esac
   done
   shift $((OPTIND -1))

   test $# -ne 2 && { echo "ERROR: Two arguments required."; usage; }
   OLDID=$1
   NEWID=$2
}

check_exist() {
   [ $(ls -ald /etc/pve/nodes/*/{lxc,qemu-server}/$NEWID.conf 2>/dev/null | wc -l) -ne 0 ] && {
      echo "ERROR: The destination ID already exists!"
		exit 1
   }
}

change_id() {
	test $force -ne 1 && read -p "You are going to move $OLDID to $NEWID, are you sure? [y/N]" RESPONSE

	case $RESPONSE in
	[yY])
		cd /etc/pve/lxc

      OLDDISK=$(grep rootfs $OLDID.conf | awk '{print $2}' | cut -d, -f1)

      # Get the path in the ZFS pool for the disk and remove leading /
      OLDDISK_PATH=$(pvesm path $OLDDISK | sed 's#/##')

		NEWDISK=$(echo $OLDDISK | sed "s/-$OLDID-/-$NEWID-/")
		NEWDISK_PATH=$(echo $OLDDISK_PATH | sed "s/-$OLDID-/-$NEWID-/")

		[ $(grep subvol $OLDID.conf| wc -l) -ge 2 ] && MULTIMOUNTS=1

		test $verbose -eq 1 && echo "INFO: Stopping CT $OLDID"
      test $(pct status $OLDID | awk '{print $2}') == "running" && {
		   pct stop $OLDID
      }

		test $verbose -eq 1 && echo "INFO: Renaming rootfs"
		zfs rename $OLDDISK_PATH $NEWDISK_PATH

		test $verbose -eq 1 && echo "INFO: Updating configuration"
		sed -i "s/-$OLDID-/-$NEWID-/" $OLDID.conf 2>/dev/null
		mv $OLDID.conf $NEWID.conf

		test $MULTIMOUNTS -eq 1 && {
			echo "WARNING: This container has multiple mounts, please check them, not starting container"
         canrun=0
      }
		;;
	*)
		echo "Aborting..."
		exit 1
		;;
   esac
}

main() {
   force=0
   verbose=0
   canrun=1
   wantrun=1
   MULTIMOUNTS=0

   parse_options "$@"

   check_exist

   change_id

   test $canrun -eq 1 && test $wantrun -eq 1 && {
      test $verbose -eq 1 && echo "INFO: Starting CT $NEWID"
      pct start $NEWID
   }
}

main "$@"
